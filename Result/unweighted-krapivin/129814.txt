it|PRP|BODY_6:BODY_5:BODY_15:BODY_2:BODY_1:ABSTRACT_3:BODY_14:BODY_3:ABSTRACT_1:BODY_4:BODY_7:BODY_8|0
parlog|NN|BODY_6:BODY_5:ABSTRACT_5:BODY_2:BODY_1:BODY_3:BODY_10:BODY_4:BODY_7:BODY_8:BODY_9|0
ghc|NN|BODY_6:BODY_5:BODY_2:BODY_1:BODY_3:BODY_4:BODY_7|0
which|WDT|BODY_6:BODY_11:BODY_5:BODY_2:BODY_3:BODY_10:BODY_4:BODY_7:BODY_9|0
the lingua franca|DT NN NN|BODY_6:BODY_5:BODY_11:BODY_2:BODY_1:BODY_3:BODY_4:BODY_7:BODY_8:BODY_9|0
them|PRP|BODY_6:BODY_12:BODY_5:BODY_1:BODY_2:BODY_3:BODY_4:BODY_10:BODY_7:BODY_9|0
the goal|DT NN|BODY_12:BODY_6:BODY_5:BODY_13:BODY_2:BODY_1:BODY_3:BODY_4:BODY_7:BODY_8:BODY_9|0
this|DT|BODY_5:BODY_2:BODY_1:BODY_3:BODY_4:BODY_8|0
goals|NNS|BODY_12:BODY_6:BODY_5:BODY_2:BODY_3:BODY_10:BODY_4:BODY_8|0
the head match|DT NN NN|BODY_6:BODY_5:BODY_2:BODY_3:BODY_4|0
ghc and parlog|NN CC NN|BODY_6:BODY_5:ABSTRACT_2:BODY_1:BODY_3:BODY_4:BODY_7:BODY_9|0
a|DT|BODY_6:BODY_11:BODY_1:BODY_3:BODY_7:BODY_8|0
|VBD|BODY_12:BODY_5:BODY_13:BODY_2:BODY_3:BODY_4:BODY_7|0
commitment|NN|BODY_16:BODY_13:BODY_3:BODY_4:BODY_7:BODY_8:BODY_9|0
the guard|DT NN|BODY_6:BODY_2:BODY_1:BODY_3:BODY_10:BODY_4:BODY_7|0
variables|NNS|BODY_12:BODY_6:BODY_2:BODY_3:BODY_4:BODY_7:BODY_8|0
c|NN|BODY_11:BODY_17:BODY_2:BODY_3:BODY_19:BODY_8:BODY_20|0
parallel|NN|BODY_6:BODY_36:BODY_5:BODY_1:BODY_3:BODY_4:BODY_7|0
ward/3|NNS|BODY_5:BODY_1:BODY_2:BODY_3:BODY_4:BODY_7|0
)|-RRB-|BODY_11:BODY_5:BODY_17:BODY_18:BODY_15:BODY_3:BODY_7:BODY_20:BODY_9|0
primitives|NNS|BODY_17:BODY_2:BODY_1:BODY_3:BODY_4:BODY_8|0
the guard goal|DT JJ NN|BODY_5:BODY_2:BODY_1:BODY_3:BODY_4:BODY_9|0
clauses|NNS|BODY_6:BODY_5:BODY_2:BODY_3:BODY_4:BODY_7|0
that|WDT|BODY_6:BODY_5:BODY_2:BODY_3:BODY_7:BODY_9|0
a goal|DT NN|BODY_6:BODY_3:BODY_4:BODY_7:BODY_8|0
d)|NN|BODY_5:BODY_21:BODY_13:BODY_3:BODY_4:BODY_20:BODY_9|0
a lingua franca|DT NN NN|BODY_5:ABSTRACT_6:TITLE_1:BODY_2:BODY_3:BODY_7|0
they|PRP|BODY_6:BODY_1:BODY_3:ABSTRACT_1:BODY_4|0
unsafe guards|JJ NNS|BODY_1:BODY_3:BODY_7:BODY_8:BODY_9|0
guard evaluation|NN NN|BODY_6:BODY_5:BODY_3:BODY_4:BODY_7|0
execution|NN|BODY_5:BODY_2:BODY_3:BODY_8|0
its second argument|PRP$ JJ NN|BODY_5:BODY_13:BODY_3:BODY_7|0
bindings|NNS|BODY_5:BODY_3:BODY_10:BODY_4:BODY_8|0
satisfy/2|NNS|BODY_6:BODY_5:BODY_4|0
gregory|NNP|BODY_1:BODY_2:BODY_3:BODY_4|0
1|CD|BODY_6:BODY_5:BODY_1:BODY_3:BODY_10:BODY_8|0
the clause|DT NN|BODY_6:BODY_5:BODY_1:BODY_10:BODY_8|0
ward/2|NN|BODY_6:BODY_1:BODY_2|0
both ghc and parlog|DT NN CC NN|BODY_2:BODY_3|0
guard goals|JJ NNS|BODY_6:BODY_5:BODY_2:BODY_14:BODY_3|0
parlog clauses|NN NNS|BODY_2:BODY_1|0
the result|DT NN|BODY_5:BODY_1:BODY_3:BODY_7|0
=>/2|CD|BODY_2:BODY_3:BODY_4|0
a user|DT NN|BODY_6:BODY_2:BODY_3:BODY_9|0
the|DT|BODY_26:BODY_2:BODY_1:BODY_14:BODY_10|0
time|NN|BODY_6:BODY_5:BODY_18:BODY_1:BODY_7|0
the unification|DT NN|BODY_12:BODY_17:BODY_4:BODY_10:BODY_7:BODY_8|0
new_goals|NNS|BODY_11:BODY_5:BODY_1|0
both|DT|ABSTRACT_2:BODY_2:BODY_4:BODY_7|0
itself|PRP|BODY_6:BODY_5:BODY_4:BODY_8:BODY_9|0
ghc clauses|JJ NNS|BODY_6:BODY_4|0
what|WP|BODY_6:BODY_1:BODY_3:BODY_14:BODY_4|0
two|CD|BODY_6:BODY_1:ABSTRACT_1:BODY_4|0
the body|DT NN|BODY_2:BODY_3:BODY_4|0
evaluation|NN|BODY_6:BODY_4|0
unification|NN|BODY_3:BODY_9|0
input arguments|NN NNS|BODY_5:BODY_2:BODY_3:BODY_7|0
both languages|DT NNS|BODY_6:BODY_1:ABSTRACT_3:BODY_3:BODY_8|0
the second clause|DT JJ NN|BODY_1:BODY_4:BODY_7:BODY_9|0
a )|DT -RRB-|BODY_13:BODY_2:BODY_3|0
head matching|JJ NN|BODY_6:BODY_2:BODY_3:BODY_10|0
_|RB|BODY_6:BODY_22:BODY_16:BODY_7|0
head|NN|BODY_2:BODY_3:BODY_4|0
each clause|DT NN|ABSTRACT_3:BODY_3:BODY_4|0
parlog programs|NN NNS|BODY_6:BODY_4:BODY_7|0
parlog goals|NN NNS|BODY_2:BODY_1:BODY_10|0
clp languages|NN NNS|BODY_1:BODY_2:BODY_3|0
b|NN|BODY_11:BODY_14:BODY_10|0
the safety|DT NN|BODY_12:BODY_1:BODY_3|0
each head argument|DT NN NN|BODY_2:BODY_3|0
's guard|POS NN|BODY_5:BODY_2:BODY_10|0
prolog|NN|BODY_6:BODY_2:BODY_3|0
a set|DT NN|BODY_5:BODY_3|0
satisfaction|NN|BODY_4:BODY_7|0
kernel parlog|NN NN|BODY_6:BODY_5:BODY_1|0
a calling argument variable|DT VBG NN NN|BODY_6:BODY_8|0
heriot-watt university|NN NN|BODY_8:BODY_20|0
the first clause|DT JJ NN|BODY_5:BODY_1:BODY_4|0
faith|NN|BODY_2:BODY_3|0
failure|NN|BODY_15:BODY_13:BODY_2|0
the guard/body|DT NN|BODY_11:BODY_7|0
's|POS|BODY_5:BODY_2:BODY_4:BODY_7|0
sequential search|JJ NN|BODY_5:BODY_2:BODY_4|0
goal|NN|BODY_12:BODY_6:BODY_10|0
the first top level goal|DT JJ JJ NN NN|BODY_1:BODY_3:BODY_7|0
programming|VBG|ABSTRACT_6:BODY_3:BODY_4|0
the following special conditions|DT VBG JJ NNS|BODY_2|0
the transformation|DT NN|BODY_2:BODY_4|0
the query ||DT NN NN|BODY_3|0
call/2|NNS|BODY_5:BODY_2|0
's pointer colouring scheme [12|POS NN NN NN NN|BODY_2|0
a suspension test overhead|DT NN NN NN|BODY_2|0
almost no ghc program|RB DT JJ NN|BODY_2|0
fcp , parlog , cp and p-prolog support sequential search|NN , NN , NN CC NN NN JJ NN|BODY_2|0
form|NN|BODY_2|0
guarded horn clauses|JJ NN NNS|BODY_2|0
the original guard goal|DT JJ NN NN|BODY_2|0
the reply|DT NN|BODY_2|0
their selectability|PRP$ NN|BODY_2|0
's rule|POS NN|BODY_3:BODY_7|0
its ability|PRP$ NN|BODY_6:BODY_5|0
a guard goal|DT NN NN|BODY_1:BODY_4|0
mode declarations|NN NNS|BODY_1:BODY_3:BODY_4|0
the ward/2|DT NNS|BODY_2:BODY_4:BODY_7|0
[ c|d] )|JJ NN -RRB-|BODY_2:BODY_10|0
s|PRP|BODY_12:BODY_14|0
a meta-call|DT NN|BODY_2:BODY_4|0
godless|JJ|BODY_11:BODY_3:BODY_4|0
meta-interpreters|NNS|BODY_6:BODY_1|0
the differences|DT NNS|BODY_2:BODY_4|0
a single implementation|DT JJ NN|BODY_4:BODY_9|0
head arguments|NN NNS|BODY_3:BODY_4|0
the control|DT NN|BODY_5:BODY_3|0
unifications|NNS|BODY_5:BODY_2:BODY_4|0
programs|NNS|BODY_6:BODY_3:BODY_7|0
g|VBG|BODY_11:BODY_5:BODY_3|0
anti-substitutability|NN|BODY_2:BODY_1:BODY_8|0
follows|VBZ|BODY_11:BODY_2:BODY_3|0
unidirectional unification|JJ NN|BODY_5:BODY_2:BODY_1:BODY_7|0
h|NN|BODY_2:BODY_3|0
such a lingua franca|PDT DT NN NN|BODY_2|0
finite failure|JJ NN|BODY_23:BODY_25|0
guards|NNS|BODY_6:BODY_2:BODY_3|0
its own right|PRP$ JJ NN|BODY_6:BODY_3:ABSTRACT_7|0
a fresh variable|DT JJ JJ|BODY_2:BODY_4|0
the resolvent|DT NN|BODY_3:BODY_8|0
a parlog program|DT NN NN|BODY_5:BODY_2|0
x2 )|NNP -RRB-|BODY_5:BODY_13:BODY_10|0
guard safety|NN NN|BODY_5:BODY_1:BODY_3|0
view|NN|BODY_5:BODY_2|0
> ( [ a|b]|FW -LRB- JJ NN|BODY_15:BODY_9|0
sub-computations|NNS|BODY_4:BODY_7|0
clean semantics|JJ NNS|ABSTRACT_3:BODY_4|0
fresh variables|JJ NNS|BODY_3:BODY_4|0
the ability|DT NN|BODY_2:BODY_1:BODY_3|0
the option|DT NN|BODY_2:BODY_3|0
clause search|NN NN|BODY_2:BODY_29|0
each parlog|DT NN|BODY_5:BODY_2|0
a clause|DT NN|BODY_5:BODY_2|0
the termination properties|DT NN NNS|BODY_6:BODY_4|0
exclusive access|JJ NN|BODY_6|0
output bindings|NN NNS|BODY_2:BODY_3|0
the instantiable side|DT JJ NN|BODY_3:BODY_4|0
languages|NNS|ABSTRACT_3:BODY_7|0
a run-time safety test anywhere safe guard evaluation|DT NN NN NN RB JJ NN NN|BODY_3:BODY_10|0
a guarded horn clause|DT JJ NN NN|BODY_3:BODY_4|0
one|CD|BODY_6:BODY_5|0
a lingua franca clause|DT NN NN NN|BODY_5:BODY_4|0
a satisfy/2 meta-call|DT NN NN|BODY_3:BODY_4|0
the second goal|DT JJ NN|BODY_2:BODY_3|0
order|NN|BODY_5:BODY_9|0
the head|DT NN|BODY_6:BODY_8|0
any prolog syntax structure|DT NN NN NN|BODY_4|0
atomic operations|JJ NNS|BODY_4|0
e delay execution|NN NN NN|BODY_2|0
one(|NN|BODY_4|0
the goal ward((|DT NN NN|BODY_2|0
the multiple environment property|DT JJ NN NN|BODY_2|0
this method|DT NN|BODY_2|0
yes )|UH -RRB-|BODY_4|0
a lingua franca implementation|DT NN NN NN|BODY_6:ABSTRACT_2:BODY_3|0
a consistent copy|DT JJ NN|BODY_5:BODY_3|0
_ _ _|RB RB RB|BODY_12:BODY_11:BODY_16:BODY_17:BODY_18:BODY_21:BODY_15:BODY_13:BODY_14:BODY_6:BODY_5:BODY_19:BODY_10:BODY_7:BODY_8:BODY_20:BODY_9|0
meta-calls|NNS|BODY_3:BODY_4|0
a , b|DT , NN|BODY_11:BODY_8|0
a meta-symbol|DT NN|BODY_6:BODY_5|0
bind|NN|BODY_5:BODY_13|0
each clause head argument|DT NN NN NN|BODY_3|0
either ghc and parlog|DT NN CC NN|BODY_2|0
figure 1|NN CD|BODY_2|0
substitute variables|NN NNS|BODY_3|0
the behaviour|DT NN|BODY_3|0
the benefits|DT NNS|BODY_3|0
the ghc fashion|DT JJ NN|BODY_2|0
the lingua|DT NN|BODY_2|0
the reverse translation|DT JJ NN|BODY_3|0
this structure|DT NN|BODY_2|0
the execution|DT NN|BODY_5:BODY_7|0
synchronisation|NN|BODY_5:BODY_2|0
clause guards|NN NNS|BODY_1:BODY_3|0
a constant|DT JJ|BODY_6:BODY_5|0
the first argument|DT JJ NN|BODY_2|0
synchronisation flags|NN NNS|BODY_11:BODY_4|0
the parlog meta-call call/2|DT NN NN NN|BODY_2:BODY_3|0
the user-defined guard test/1|DT JJ NN NNS|BODY_3:BODY_9|0
the first two arguments|DT JJ CD NNS|BODY_2:BODY_3|0
alpha(|NN|BODY_6:BODY_9|0
flat ghc|JJ NN|BODY_2|0
call semantics|NN NNS|BODY_19:BODY_8|0
the ward/2 predicate|DT NN NN|BODY_1:BODY_3|0
's ability|POS NN|BODY_5:BODY_4|0
its replacement|PRP$ NN|BODY_11:BODY_3|0
b 1 and . and b n|NN CD CC . CC NN NN|BODY_5|0
[l|NNP|BODY_22:BODY_15|0
means|NNS|BODY_5:BODY_2|0
its new replacement|PRP$ JJ NN|BODY_5:BODY_4|0
each|DT|BODY_5:BODY_4|0
this translation scheme|DT NN NN|BODY_2|0
unsafe variables|JJ NNS|BODY_5|0
the problem|DT NN|BODY_1:BODY_2|0
's other end x4|POS JJ NN NNS|BODY_6|0
14|CD|BODY_7|0
a meta-interpreter|DT NN|BODY_2|0
a simple and powerful language|DT JJ CC JJ NN|BODY_2|0
call/1|NN|BODY_7|0
pp.163-164|NNS|BODY_8|0
process/1|NNS|BODY_2|0
prolog programming|NN NN|BODY_8|0
the choice|DT NN|BODY_2|0
the granularity|DT NN|BODY_7|0
the input argument symbol|DT NN NN NN|BODY_12|0
these considerations|DT NNS|BODY_28:BODY_1|0
bind variables|NN NNS|BODY_5|0
m|NN|BODY_23:BODY_1|0
the third|DT JJ|BODY_6|0
' guards|POS NNS|BODY_6|0
execution conditions|NN NNS|BODY_2|0
parts|NNS|BODY_8|0
the short circuit|DT JJ NN|BODY_15:BODY_1|0
input or output|NN CC NN|BODY_4|0
full unification|JJ NN|BODY_2|0
extant implementations|JJ NNS|BODY_2|0
such a way|JJ DT NN|BODY_6:BODY_3|0
this frozen space|DT JJ NN|BODY_2|0
[]|NNS|BODY_12:BODY_6|0
processing|NN|BODY_4|0
a goal process|DT NN NN|BODY_6|0
an example|DT NN|BODY_2:BODY_1|0
all and only|DT CC RB|BODY_2|0
input|NN|BODY_12:BODY_3|0
the meta-call satisfy/2|DT NN NN|BODY_4:BODY_9|0
relations|NNS|BODY_4|0
clause search and goal conjunction|NN NN CC NN NN|BODY_3|0
test/3|NN|BODY_5:BODY_4|0
a place filler|DT NN NN|BODY_6|0
the semantic emphasis ghc approaches|DT JJ NN NN NNS|BODY_2|0
imperial college|JJ NN|BODY_10|0
special primitives|JJ NNS|BODY_4|0
localisation [19]|IN NN|BODY_2|0
the calling environment|DT VBG NN|BODY_13:BODY_4:BODY_8|0
general [6|JJ NNS|BODY_5|0
a meta-symbol place filler|DT NN NN NN|BODY_2|0
the bodies|DT NNS|BODY_5:BODY_3|0
the unsafe guard|DT JJ NN|BODY_6:BODY_4|0
the clp language|DT NN NN|BODY_10:BODY_8|0
the pure prolog program|DT JJ NN NN|BODY_1:BODY_8|0
suspension constraints|NN NNS|BODY_2|0
ghc clause|JJ NN|BODY_6:BODY_3|0
its first argument|PRP$ JJ NN|BODY_2:BODY_3:BODY_4|0
's job|POS NN|BODY_2|0
that relation|DT NN|BODY_4|0
faith )|NN -RRB-|BODY_15|0
safety|NN|BODY_2:BODY_4:BODY_9|0
which b|WDT NN|BODY_2|0
and-sequential operators|JJ NNS|BODY_1:BODY_2:BODY_4|0
the conjunction|DT NN|BODY_2:BODY_1|0
concurrent logic programming or clp languages|JJ NN NN CC NN NNS|BODY_2|0
ghc [21]|JJ NNS|BODY_6|0
its argument|PRP$ NN|BODY_5:BODY_3|0
the first primitive|DT JJ JJ|BODY_4|0
a new conjunction|DT JJ NN|BODY_2|0
k )|NN -RRB-|BODY_12:BODY_14|0
primitive guard goals|JJ JJ NNS|BODY_9|0
this transformation mark|DT NN NN|BODY_2|0
the second list argument|DT JJ NN NN|BODY_2|0
distinct fresh variables|JJ JJ NNS|BODY_15|0
a user-defined condition test/1|DT JJ NN NNS|BODY_2|0
dynamic and programmable control|JJ CC JJ NN|BODY_2|0
compile time safety analysis|JJ NN NN NN|BODY_2|0
emphasis|NN|BODY_2|0
the significant price|DT JJ NN|BODY_2|0
the suspension|DT NN|BODY_2|0
concurrent prolog [16]|JJ NN NN|BODY_4|0
incorrect|JJ|BODY_3:BODY_4|0
the language|DT NN|BODY_2|0
the parallel conjunction operator |DT JJ NN NN|BODY_7:BODY_8|0
all the other language|PDT DT JJ NN|BODY_3|0
any|DT|BODY_3|0
primitives ghc|NNS NN|BODY_2|0
r) unifies r|JJ NNS NN|BODY_3|0
the declarative meaning|DT JJ NN|BODY_2|0
the run-time suspension test|DT NN NN NN|BODY_2|0
the three argument parlog meta-call|DT CD NN NN NN|BODY_4|0
this respect|DT NN|BODY_7|0
the ward predicate|DT NN NN|BODY_2|0
the two terms|DT CD NNS|BODY_6|0
the clause body|DT NN NN|BODY_6:BODY_2|0
all occurrences|DT NNS|BODY_2|0
the action|DT NN|BODY_4|0
a general scheme|DT JJ NN|BODY_3|0
account multiple occurrences|NN JJ NNS|BODY_4|0
whose clause|WP$ NN|BODY_6:BODY_5|0
first instance|JJ NN|BODY_4|0
a sequential prolog-like style|DT JJ JJ NN|BODY_2|0
the declarative reading|DT JJ NN|BODY_1:BODY_4|0
the attempt|DT NN|BODY_3:BODY_4|0
an aggregate term|DT JJ NN|BODY_1:BODY_2|0
its guard and body goals|PRP$ NN CC NN NNS|BODY_15|0
the reason|DT NN|BODY_11|0
and-parallel input resolution|JJ NN NN|BODY_2|0
or-parallel execution|JJ NN|BODY_6|0
user defined guards|NN VBN NNS|BODY_2|0
sequential conjunctions|JJ NNS|BODY_5:BODY_8|0
a subsequently rejected clause|DT RB VBN NN|BODY_2|0
that processes|DT NNS|BODY_4|0
tree implementation model|NN NN NN|BODY_6|0
( a,a)|-LRB- NN|BODY_3|0
away sequential conjunctions|RB JJ NNS|BODY_3|0
this clp language|DT NN NN|BODY_3|0
three(( a ,b) )|JJ DT NN -RRB-|BODY_3|0
risk set|NN NN|BODY_11:BODY_15:BODY_2|0
var/1|NNS|BODY_5:BODY_2:BODY_4|0
the call|DT NN|BODY_2:BODY_9|0
[5 , 21]|CD , CD|BODY_5|0
goals )|NNS -RRB-|BODY_5|0
various transformation techniques|JJ NN NNS|BODY_4|0
||NN|BODY_4|0
a constant done and waiting|DT JJ VBN CC VBG|BODY_4|0
the =>/2 process|DT NN NN|BODY_2:BODY_3|0
's principal functor|POS JJ NN|BODY_10|0
a lingua franca clause translation|DT NN NN NN NN|BODY_7|0
query/response message( q|NN NN NN|BODY_4|0
language design|NN NN|BODY_3|0
flag )|NN -RRB-|BODY_11:BODY_8|0
which computation|WDT NN|BODY_5|0
these programs|DT NNS|BODY_6|0
a conjunction|DT NN|BODY_4:BODY_9|0
icot|NN|BODY_26|0
figure 4|NN CD|BODY_6|0
formal analysis|JJ NN|BODY_6|0
the application|DT NN|BODY_3|0
the full lingua franca|DT JJ NN NN|BODY_3|0
the program|DT NN|BODY_4|0
y )|NN -RRB-|BODY_2|0
the variable a1|DT JJ NNS|BODY_2|0
this language|DT NN|BODY_2:BODY_8|0
the fashion|DT NN|BODY_3:BODY_4:BODY_8|0
i|FW|BODY_5:BODY_1|0
_ )|NNP -RRB-|BODY_7:BODY_8|0
this transformation|DT NN|BODY_3|0
the termination|DT NN|BODY_3|0
the opposite order|DT JJ NN|BODY_4|0
[6|CD|BODY_7|0
a list|DT NN|BODY_3|0
kernel parlog primitives|NN NN NNS|BODY_3|0
the sequential style|DT JJ NN|BODY_7|0
the programmer|DT NN|BODY_6|0
this problem|DT NN|BODY_4|0
the chain|DT NN|BODY_5|0
synchronise and sequence execution|NN CC NN NN|BODY_7|0
each element|DT NN|BODY_3|0
no transformation|DT NN|BODY_3:BODY_4|0
suspension|NN|BODY_5|0
the meta-calls|DT NNS|BODY_5|0
's parallel inference machine [15]|POS JJ NN NN NN|BODY_27|0
each m i|DT NN NN|BODY_11|0
demand|NN|BODY_6|0
the first guard goal|DT JJ NN NN|BODY_1:BODY_2|0
compile time analysis|JJ NN NN|BODY_1:BODY_7|0
this way|DT NN|BODY_1:BODY_7|0
that suspension effects|DT NN NNS|BODY_3|0
's method|POS NN|BODY_5:BODY_2:BODY_3|0
a program clause|DT NN NN|BODY_4|0
the safe guard suspension test|DT NN NN NN NN|BODY_4|0
safe storage|JJ NN|BODY_3|0
sequential operator|JJ NN|BODY_2|0
the left hand side|DT JJ NN NN|BODY_5|0
a ghc or parlog program|DT NN CC VB NN|BODY_2|0
a lingua franca program|DT NN NN NN|BODY_2|0
clauses/2|NNS|BODY_3|0
a parlog clause mode test(|DT NN NN NN NN|BODY_3|0
all variables|DT NNS|BODY_4|0
the negation|DT NN|BODY_4|0
the intended|DT JJ|BODY_5|0
a logic programming language|DT NN NN NN|BODY_4:BODY_7|0
an occurrence|DT NN|BODY_5|0
each primitive call|DT JJ NN|BODY_4|0
all unsafe variables|DT JJ NNS|BODY_2:BODY_1|0
at least all the left hand side variables|IN JJS PDT DT JJ NN NN NNS|BODY_3|0
its not holding|PRP$ RB VBG|BODY_3|0
each c|DT NN|BODY_2|0
's guard numbering scheme|POS NN NN NN|BODY_2|0
a conjunction operator|DT NN NN|BODY_2|0
a kernel parlog|DT NN NN|BODY_2|0
choice resolution|NN NN|BODY_2|0
distinct fresh substitute variables|JJ JJ NN NNS|BODY_1|0
its third clause|PRP$ JJ NN|BODY_1|0
miyazaki|NN|BODY_1|0
several important differences|JJ JJ NNS|BODY_2|0
the meta-symbol|DT NN|BODY_1|0
there|EX|BODY_1|0
this set|DT NN|BODY_2|0
ward/3 suitable|DT JJ|BODY_1|0
the second and third clause bodies|DT JJ CC JJ NN NNS|BODY_2|0
input values|NN NNS|BODY_4|0
a method|DT NN|BODY_2:ABSTRACT_1|0
a ghc-like programming style|DT JJ NN NN|BODY_5|0
an undecidable matter|DT JJ NN|BODY_4|0
r) elements mode process(|JJ NNS NN NN|BODY_5|0
the control emphasis parlog|DT NN NN NN|BODY_2|0
12]|CD|BODY_4|0
non-unifiability|NN|BODY_3|0
the ward/2 goal|DT NN NN|BODY_1:BODY_3|0
guard goal execution|NN NN NN|BODY_4:BODY_8|0
an opposite point|DT JJ NN|BODY_4|0
1 and . and g m|CD CC . CC VBG NN|BODY_6:BODY_4|0
ancestor processes|NN NNS|BODY_4|0
joint termination|JJ NN|BODY_2|0
each goal|DT NN|BODY_1:BODY_4|0
reluctant unidirectional unification|JJ JJ NN|BODY_6:BODY_1:BODY_3|0
control|NN|BODY_7:BODY_9|0
a value|DT NN|BODY_6:BODY_4|0
c)|NN|BODY_7|0
early evaluation|JJ NN|BODY_5:BODY_2|0
this guard|DT NN|BODY_2|0
space|NN|BODY_3|0
4.7.2|CD|BODY_4|0
's sequential operators|POS JJ NNS|BODY_2|0
guard goals or argument positions|JJ NNS CC NN NNS|BODY_8|0
their many detailed and helpful comments|PRP$ JJ JJ CC JJ NNS|BODY_6|0
binding one end x1|NN CD NN NNS|BODY_3|0
the non-instantiable side|DT JJ NN|BODY_6:BODY_3|0
good control facilities|JJ NN NNS|ABSTRACT_4|0
all three relevant variables|DT CD JJ NNS|BODY_5|0
x1|CD|BODY_12:BODY_4:BODY_9|0
an extra argument|DT JJ NN|BODY_3|0
non-deterministic these drawbacks|JJ DT NNS|BODY_21|0
its relation name and arity|PRP$ NN NN CC NN|BODY_10|0
an ancestor guard|DT NN JJ|BODY_7:BODY_8|0
alpha/2|NNS|BODY_1:BODY_4|0
addition|NN|BODY_22|0
that variables|DT NNS|BODY_2|0
ghc [8|JJ NNS|BODY_3|0
franca clauses|DT NNS|BODY_3|0
other clp languages|JJ NN NNS|BODY_3|0
r|NN|BODY_8|0
prior clauses|JJ NNS|BODY_5|0
a choice|DT NN|BODY_2|0
the control features|DT NN NNS|BODY_6:BODY_3|0
a primitive|DT JJ|BODY_3:BODY_7|0
4 especially section 4.10 [21]|CD RB NN CD NN|BODY_27|0
the paper|DT NN|BODY_4|0
whose success or failure|WP$ NN CC NN|BODY_3|0
constructs|NNS|BODY_5|0
&|CC|BODY_3|0
all clp languages|DT NN NNS|BODY_24|0
the original translation|DT JJ NN|BODY_5:BODY_4|0
compile time|JJ NN|BODY_3|0
the complex term|DT JJ NN|BODY_6|0
the execution order|DT NN NN|BODY_9|0
left|JJ|BODY_10|0
's reviewers|POS NNS|BODY_5|0
the basic machine language|DT JJ NN NN|BODY_25|0
[ ] )|JJ NN -RRB-|BODY_6|0
a gulf|DT NN|BODY_3|0
the clause head|DT NN NN|BODY_9|0
only match input|RB NN NN|BODY_2|0
sequential conjunction replacement|JJ NN NN|BODY_2|0
the basic drawback|DT JJ NN|BODY_23|0
a , b , x2 , x3 ) , gamma( c|DT , NN , NNP , CD -RRB- , NN NN|BODY_11|0
arity n|NN NN|BODY_3|0
the main approaches|DT JJ NNS|BODY_2|0
all|DT|BODY_6:BODY_1|0
[_121]|JJ|BODY_3|0
the extent|DT NN|BODY_4|0
the output arguments|DT NN NNS|BODY_32|0
the rule|DT NN|BODY_1:BODY_4|0
redundant computation|JJ NN|BODY_11|0
wait(check(|NN|BODY_5|0
applications|NNS|BODY_4|0
the sequential conjunction operator|DT JJ NN NN|BODY_11:BODY_1|0
a head match|DT NN NN|BODY_13:BODY_2|0
sequential execution|JJ NN|BODY_8|0
the g|DT VBG|BODY_11|0
the further communication|DT JJ NN|BODY_3|0
a ghc program|DT JJ NN|BODY_2|0
the last clause|DT JJ NN|BODY_2|0
the valid_query/1 guard test|DT JJ NN NN|BODY_4|0
or-parallel clause search|JJ NN NN|BODY_2|0
guard goal|NN NN|BODY_3:BODY_8|0
[ j]|NNP NNP|BODY_8|0
a ) , []|DT -RRB- , NN|BODY_6|0
a lot|DT NN|BODY_10|0
pragmas|NNS|BODY_3|0
input/output primitives|NN NNS|BODY_3|0
[message( _|NNP NNP|BODY_7|0
non-determinism|NN|BODY_27|0
validity|NN|BODY_2|0
the relation mode valid(|DT NN NN NN|BODY_4|0
and-parallelism|NN|BODY_3|0
members|NNS|BODY_9|0
the third clause|DT JJ NN|BODY_5:BODY_1|0
k ) | wait(analyse(|NN -RRB- NN NN|BODY_9|0
terminates|NNS|BODY_9|0
parlog clause heads|NN NN NNS|BODY_33|0
the sequential variant truth|DT NN JJ NN|BODY_5|0
reduction|NN|BODY_31|0
scotland ghc|NN NN|BODY_22|0
highly parallel data-flow architectures|RB JJ NN NNS|BODY_9|0
kl1-b|NN|BODY_24|0
edinburgh|NN|BODY_21|0
steve gregory|JJ NN|BODY_3|0
only failure|RB NN|BODY_3|0
all goals|DT NNS|BODY_2|0
and-parallel goals|JJ NNS|BODY_10|0
one or more clauses|CD CC JJR NNS|BODY_1|0
clp implementations|NN NNS|BODY_3|0
their execution order constraints|PRP$ NN NN NNS|BODY_3|0
an extra primitive goal|DT JJ JJ NN|BODY_7|0
the test|DT NN|BODY_2:BODY_1|0
one-way unification|JJ NN|BODY_9|0
negation|NN|BODY_12:BODY_14|0
this reverse translation method|DT NN NN NN|BODY_2|0
difficulty|NN|BODY_2|0
several simple matching goals|JJ JJ JJ NNS|BODY_2|0
the two arguments|DT CD NNS|BODY_2:BODY_1|0
guarded horn clauses h|JJ NN NNS NN|BODY_2|0
a simple means|DT JJ NN|BODY_7|0
the user-defined guard goal|DT JJ NN NN|BODY_1:BODY_4|0
logic programs|NN NNS|BODY_4|0
a ghc|DT JJ|BODY_2:BODY_4|0
the top levels goals|DT NN NNS NNS|BODY_2|0
the primitive|DT JJ|BODY_2:BODY_3|0
the first goal|DT JJ NN|BODY_10|0
computation outcomes|NN NNS|BODY_20|0
the goal or conjunction|DT NN CC NN|BODY_4|0
the old guard variables|DT JJ NN NNS|BODY_6|0
the mode declaration|DT NN NN|BODY_34|0
old variable values|JJ JJ NNS|BODY_3|0
0|CD|BODY_4|0
simpler|JJR|BODY_5:BODY_2|0
a ) , [] , d)|DT -RRB- , NN , NN|BODY_5|0
a practical necessity|DT JJ NN|BODY_26|0
the primitive melt/2|DT JJ NN|BODY_9|0
the two variables|DT CD NNS|BODY_5|0
its computation space|PRP$ NN NN|BODY_10|0
the query part q|DT NN NN NN|BODY_11|0
only|RB|BODY_3|0
colleagues|NNS|BODY_7|0
all parlog head arguments|DT NN NN NNS|BODY_2|0
success|NN|BODY_3|0
each c i|DT NN NN|BODY_3|0
the department|DT NN|BODY_18|0
key parlog primitives|JJ NN NNS|BODY_2|0
two argument structures|CD NN NNS|BODY_2|0
a simpler representation|DT JJR NN|BODY_2|0
will evaluation|MD NN|BODY_7|0
that bindings|DT NNS|BODY_2|0
concurrent prolog|JJ NN|BODY_3|0
the most prominent|DT RBS JJ|BODY_5|0
relevant left hand argument variables|JJ JJ NN NN NNS|BODY_3|0
f|h]|NN|BODY_17|0
success , failure|NN , NN|BODY_2|0
a|b]|NN|BODY_2|0
the arguments|DT NNS|BODY_2|0
less parallel architectures|JJR JJ NNS|BODY_12|0
the meta-programming|DT NN|BODY_2|0
an unsafe guard goal way( x ) binding x|DT JJ NN NN NN NN -RRB- NN NN|BODY_3|0
a calling argument variable _121|DT VBG NN JJ CD|BODY_3|0
the arities and execution conditions|DT NNS CC NN NNS|ABSTRACT_2|0
the process|DT NN|BODY_7|0
ever|RB|BODY_6:BODY_4|0
check([|NNS|BODY_5|0
test ([ a|d]|NN IN NN|BODY_6|0
successful unification|JJ NN|BODY_4|0
the same effect|DT JJ NN|BODY_9|0
all these variables|PDT DT NNS|BODY_8|0
complex non-instantiable side terms|JJ JJ NN NNS|BODY_2|0
purely parallel search and conjunction operators|RB JJ NN CC NN NNS|BODY_7|0
this paper|DT NN|BODY_1|0
goal termination|NN NN|BODY_6|0
the common linguistic denominator|DT JJ JJ NN|BODY_2|0
empty (|JJ -LRB-|BODY_2|0
the first input|DT JJ NN|BODY_4|0
this test|DT NN|BODY_1|0
a fully general way ghc programs|DT RB JJ NN NN NNS|BODY_2|0
 operators|NN NNS|BODY_6|0
a ,b) ) , [d|DT NN -RRB- , NN|BODY_7|0
a , d)|DT , NN|BODY_3|0
a product|DT NN|BODY_6|0
similar execution models|JJ NN NNS|BODY_2|0
the calling argument variable|DT VBG NN JJ|BODY_2|0
scheduling and resource allocation|NN CC NN NN|BODY_3|0
the time|DT NN|BODY_4|0
ghc programs|NN NNS|BODY_3|0
control constructs|NN NNS|BODY_4|0
a resolvent|DT NN|BODY_5|0
the failure|DT NN|BODY_3|0
two( b)|JJ NN|BODY_6|0
a ghc and parlog program|DT NN CC NN NN|BODY_3|0
ghc.|VBG|BODY_11:BODY_5|0
an ordered relation or . or c n|DT VBN NN CC . CC NN NN|BODY_2|0
the first argument relation|DT JJ NN NN|BODY_4|0
the selected clause|DT JJ NN|BODY_4|0
their output bindings|PRP$ NN NNS|BODY_3|0
computation space|NN NN|BODY_1|0
guard goal processes|JJ NN NNS|BODY_2|0
a variable|DT JJ|BODY_5|0
 & |NNP CC|BODY_5|0
parallel or|JJ CC|BODY_3|0
expressiveness|NN|BODY_4|0
a clp language|DT NN NN|BODY_3|0
true )|JJ -RRB-|BODY_3|0
choice( b|NN NN|BODY_14|0
the predicates ward/3|DT NNS NNS|BODY_3|0
the operator|DT NN|BODY_6|0
each such clause|DT JJ NN|BODY_3|0
computer science|NN NN|BODY_19|0
all the programs|PDT DT NNS|ABSTRACT_4|0
bind one|NN CD|BODY_5|0
wait/3|NN|BODY_6|0
the structure copy|DT NN NN|BODY_4|0
the same relation|DT JJ NN|BODY_3|0
the short circuit technique|DT JJ NN NN|BODY_4|0
lack|NN|BODY_2|0
those clauses|DT NNS|BODY_3|0
prior guards|JJ NNS|BODY_4|0
the locus|DT NN|BODY_8|0
indexing|NN|BODY_3|0
goal conjunction|NN NN|BODY_30|0
f)|NN|BODY_6:BODY_8|0
sequential search goal(|JJ NN NN|BODY_4|0
complete searches|JJ NNS|BODY_25|0
thanks|NNS|BODY_2|0
each unsafe|DT JJ|BODY_5|0
the second guard safety unidirectional unification|DT JJ NN NN JJ NN|BODY_2|0
the frozen clause|DT JJ NN|BODY_11|0
a single mode declaration mode r( m|DT JJ NN NN NN NN NN|BODY_5|0
some term t|DT NN NN|BODY_6|0
misleading assurances|JJ NNS|BODY_3|0
[ a|d] ) , e) , test (|JJ NN -RRB- , RB , NN -LRB-|BODY_16|0
two unbound arguments|CD JJ NNS|BODY_2|0
#|#|BODY_7|0
user|NN|BODY_7|0
the symbol|DT NN|BODY_8|0
a user-defined guard goal|DT JJ NN NN|BODY_9|0
a fresh melted copy|DT JJ VBN NN|BODY_10|0
non-deterministic properties|JJ NNS|BODY_10|0
's sequencing|POS NN|BODY_8|0
a role|DT NN|BODY_6|0
provision|NN|BODY_2|0
exceptions|NNS|BODY_5|0
's design|POS NN|BODY_8|0
guard safety suspension|NN NN NN|BODY_2|0
the loss|DT NN|BODY_2|0
the new clause head|DT JJ NN NN|BODY_14|0
corresponding goal arguments|JJ NN NNS|BODY_3|0
a complex series|DT JJ NN|BODY_5|0
in order|IN NN|BODY_5|0
a compile time safety check|DT JJ NN NN NN|BODY_4|0
's three argument control meta-call|POS CD NN NN NN|BODY_5|0
and-parallel , ghc programs|JJ , JJ NNS|BODY_2|0
the complementarity|DT NN|BODY_2|0
a new primitive|DT JJ JJ|BODY_2|0
only a sophisticated control meta-call|RB DT JJ NN NN|BODY_6|0
method|NN|BODY_3|0
a clause search operator|DT NN NN NN|BODY_7|0
the sequential operator|DT JJ NN|BODY_2|0
a similar aggregate|DT JJ JJ|BODY_9|0
awake|JJ|BODY_3|0
control issues|NN NNS|BODY_2|0
the fourth clause|DT JJ NN|BODY_3|0
the order|DT NN|BODY_8|0
[14] p.352-353|JJ NN|BODY_28|0
a sequential |DT JJ|BODY_3|0
a major part|DT JJ NN|BODY_10|0
big runtime overheads|JJ NN NNS|BODY_2|0
the expense|DT NN|BODY_13|0
the predicate|DT NN|BODY_1:BODY_4|0
a = truth|DT SYM NN|BODY_3|0
the sequence|DT NN|BODY_11|0
the design|DT NN|BODY_23|0
that sequential clause search operators|DT JJ NN NN NNS|BODY_5|0
the common way|DT JJ NN|BODY_3|0
a unbound|DT NN|BODY_3|0
the same relation r|DT JJ NN NN|BODY_2|0
all ghc|DT NN|BODY_7|0
the principle|DT NN|BODY_4|0
sequencing [21]|VBG NN|BODY_8|0
full ghc|JJ .|BODY_9|0
sequence calls|NN NNS|BODY_2|0
its semantics|PRP$ NNS|BODY_4|0
the original variable|DT JJ JJ|BODY_10|0
the suspension mechanism|DT NN NN|BODY_3|0
non-variables|NNS|BODY_4|0
test( a|VB DT|BODY_11|0
the suspended user-defined guard process|DT VBN JJ NN NN|BODY_5|0
the new|DT JJ|BODY_5|0
above|IN|BODY_3|0
the synchronisation rule states|DT NN NN NNS|BODY_4|0
the following lingua franca clause|DT VBG NN JJ NN|BODY_4|0
conditions|NNS|BODY_3|0
[ a|d] )|JJ NN -RRB-|BODY_4|0
e) | process( b|RB NN NN NN|BODY_7|0
the ward/3 goal|DT NN NN|BODY_5|0
 and m|NN CC NN|BODY_8|0
binding its third argument|JJ PRP$ JJ NN|BODY_4|0
n|NN|BODY_7|0
sequentiality|NN|BODY_4|0
a ) , [] , l)|DT -RRB- , NN , NN|BODY_10|0
the process tree|DT NN NN|BODY_3|0
user defined guard goal processes|NN VBN JJ NN NNS|BODY_2|0
c ) | compare( b|NN -RRB- NN NN NN|BODY_12|0
's head h|POS NN NN|BODY_9|0
each ghc or parlog clause|DT NN CC NN NN|BODY_4|0
the factors|DT NNS|BODY_3|0
run-time errors|JJ NNS|BODY_6|0
's sequential search operator|POS JJ NN NN|BODY_2|0
r)|b] )|NN -RRB-|BODY_8|0
a programming vehicle|DT NN NN|BODY_3|0
the next unencountered sequential clause search operator|DT JJ JJ JJ NN NN NN|BODY_8|0
's run-time suspension test and ghc|POS NN NN NN CC NN|BODY_3|0
the second implements|DT JJ VBZ|BODY_3|0
the author|DT NN|BODY_17|0
a special primitive ward/2|DT JJ JJ NN|BODY_4|0
output head arguments|NN NN NNS|BODY_6:BODY_1|0
clean semantic properties|JJ JJ NNS|BODY_3|0
enhancing control|VBG NN|BODY_3|0
suspends|NNS|BODY_5|0
rule|NN|BODY_1|0
execute( q|NN NN|BODY_2|0
four main features|CD JJ NNS|BODY_3|0
its implementation|PRP$ NN|BODY_3|0
less runtime overheads|RBR JJ NNS|BODY_6|0
neither ghc nor parlog|DT NN CC NN|BODY_2|0
or-sequential clause search|JJ NN NN|BODY_3|0
runnable|JJ|BODY_2|0
the query|DT NN|BODY_5:BODY_3|0
the local part|DT JJ NN|BODY_14|0
call effects|JJ NNS|BODY_6|0
all =/2 predicates|DT CD NNS|BODY_3|0
the methods|DT NNS|BODY_3|0
's unidirectional unification|POS JJ NN|BODY_3|0
clause heads|NN NNS|BODY_3|0
all members|DT NNS|BODY_9|0
a , b) , gamma( c|DT , NN , NN NN|BODY_4|0
the relation|DT NN|BODY_6:BODY_10|0
e) ) , i ) | process( b|RB -RRB- , FW -RRB- NN NN NN|BODY_18|0
no declarative meaning|DT JJ NN|BODY_7|0
a group|DT NN|BODY_3|0
' head matching requirements|POS NN NN NNS|BODY_2|0
's fashion|POS NN|BODY_4|0
such guard goals|JJ NN NNS|BODY_9|0
as long|RB JJ|BODY_4|0
the instantiation|DT NN|BODY_2|0
their corresponding goal arguments|PRP$ JJ NN NNS|BODY_35|0
reason|NN|BODY_6|0
each language|DT NN|BODY_3|0
synchronisation rule|NN NN|BODY_3|0
the parallel  , |DT JJ NNS ,|BODY_10|0
clause selection|NN NN|BODY_4|0
then frozen unused pending|RB JJ JJ VBG|BODY_2|0
-) . __|NNP . NNS|BODY_10|0
failures|NNS|BODY_4|0
d) ||JJ NN|BODY_8|0
[17] p.462-463|JJ NNS|BODY_10|0
x2|NNS|BODY_9|0
output unification|NN NN|BODY_3|0
flavours|NNS|BODY_2|0
_ _|. .|BODY_11|0
user defined goals|NN VBN NNS|BODY_2|0
irrelevant guard evaluations|JJ NN NNS|BODY_5|0
no special suspension mechanism|DT JJ NN NN|BODY_5|0
==/2|NNS|BODY_3|0
creating contention|VBG NN|BODY_5|0
's match|POS NN|BODY_8|0
a partially bound or unbound argument|DT RB VBN CC JJ NN|BODY_2|0
's or-sequential operator|POS JJ NN|BODY_3|0
the requirements|DT NNS|ABSTRACT_2|0
guarded clauses|JJ NNS|BODY_5|0
synchronisation ghc|NN NN|BODY_2|0
the clarity and simplicity|DT NN CC NN|BODY_3|0
the localised run-time suspension test|DT VBN NN NN NN|BODY_3|0
relevant clauses|JJ NNS|BODY_4|0
extra restrictions|JJ NNS|BODY_5|0
figure 2|NN CD|BODY_2|0
e|NN|BODY_5:BODY_7|0
two variable arguments|CD JJ NNS|BODY_8|0
b)|NN|BODY_4|0
lingua franca programs|NN NN NNS|BODY_2|0
unsafely guarded clauses|RB VBN NNS|BODY_5|0
related languages|JJ NNS|BODY_7|0
a variable binding|DT JJ NN|BODY_2|0
the context|DT NN|BODY_8|0
1 and . and g n or resolvent|CD CC . CC VBG NN CC NN|BODY_6|0
match/3|NN|BODY_8|0
its arguments|PRP$ NNS|BODY_6|0
the guard goal test/1|DT NN NN NNS|BODY_4|0
's second argument|POS JJ NN|BODY_2|0
its arguments and suspends|PRP$ NNS CC NNS|BODY_2|0
the passive part|DT JJ NN|BODY_7|0
appropriate suspension effects|JJ NN NNS|BODY_7|0
invalid execution|JJ NN|BODY_10|0
non-variable bindings|JJ NNS|BODY_5|0
such negation|JJ NN|BODY_2|0
only primitives|RB NNS|BODY_4|0
calling argument variables|VBG NN NNS|BODY_7|0
variable|JJ|BODY_6|0
sequential search operators|JJ NN NNS|BODY_3|0
the head or guard causes|DT NN CC NN VBZ|BODY_11|0
each goal two extra arguments|DT NN CD JJ NNS|BODY_6|0
the relevant binding|DT JJ NN|BODY_10|0
the respective virtues|DT JJ NNS|BODY_2|0
a wide variety|DT JJ NN|BODY_5|0
their input head arguments|PRP$ NN NN NNS|BODY_2|0
another common feature|DT JJ NN|BODY_8|0
the use|DT NN|BODY_5|0
1 and n|CD CC NN|BODY_9|0
all clauses|DT NNS|BODY_7|0
match/4|NNS|BODY_16|0
m]|NN|BODY_16|0
a , c ) | compare( b|DT , NN -RRB- NN NN NN|BODY_3|0
bind their arguments|NN PRP$ NNS|BODY_6|0
| satisfy( goal|NN NN NN|BODY_10|0
explicit input|JJ NN|BODY_2|0
an arbitrary functor and arguments|DT JJ NN CC NNS|BODY_8|0
the atomic execution|DT JJ NN|BODY_10|0
the ghc clauses|DT JJ NNS|BODY_3|0
the other language|DT JJ NN|ABSTRACT_5|0
risk|NN|BODY_3|0
p( goals|NNS NNS|BODY_4|0
q( goal|NN NN|BODY_4|0
each time|DT NN|BODY_2|0
example|NN|BODY_1|0
the second clause head|DT JJ NN NN|BODY_9|0
related unification|JJ NN|BODY_7|0
a valve|DT NN|BODY_6|0
the more important concurrent logic|DT RBR JJ JJ NN|ABSTRACT_2|0
a sequential conjunction operator|DT JJ NN NN|BODY_2|0
a calling argument|DT VBG NN|BODY_7|0
this time|DT NN|BODY_2|0
a unification|DT NN|BODY_6|0
language|NN|ABSTRACT_5|0
's declarative reading|POS JJ NN|BODY_2|0
realising declarative meaning|JJ JJ NN|BODY_11|0
top|NN|BODY_8|0
the ghc clause|DT JJ NN|BODY_2|0
expressive power|JJ NN|BODY_3|0
the =>/2 goal|DT NN NN|BODY_4|0
bind calling arguments|NN VBG NNS|BODY_9|0
g1|NNS|BODY_8|0
reduce/3 examines|NN NNS|BODY_2|0
atomic formulae (unitary prolog goals|JJ NNS JJ NN NNS|BODY_2|0
the test/1 goal|DT NN NN|BODY_4|0
g 1 and . and g m|NN CD CC . CC NN NN|BODY_4|0
reluctance|NN|BODY_8|0
a chain|DT NN|BODY_7|0
the control variable|DT NN JJ|BODY_5|0
user-defined predicates and primitives|JJ NNS CC NNS|BODY_5|0
neither language|DT NN|ABSTRACT_3|0
both sequential and parallel operators|DT JJ CC JJ NNS|BODY_2|0
use|NN|BODY_2|0
sharing|NN|BODY_5|0
output arguments|NN NNS|BODY_5|0
a way|DT NN|BODY_6|0
each clp clause|DT NN NN|BODY_4|0
8.|.|BODY_1|0
a copy|DT NN|BODY_1|0
a more streamlined implementation|DT RBR JJ NN|BODY_4|0
a sequential algorithm|DT JJ NN|BODY_1|0
an input matching role|DT NN VBG NN|BODY_4|0
lingua franca relations|NN NN NNS|BODY_1|0
risk variables|NN NNS|BODY_4|0
this lingua franca|DT NN NN|BODY_1|0
this one-way unification operation|DT JJ NN NN|BODY_4|0
translated ghc|VBN NN|BODY_4|0
each other|DT JJ|BODY_5:BODY_13|0
a reluctant unidirectional unification|DT JJ JJ NN|BODY_4|0
translating ghc or parlog|NN NN CC NN|BODY_5|0
the satisfy/2 predicate|DT NN NN|BODY_2|0
the local chain|DT JJ NN|BODY_8|0
the structure|DT NN|BODY_3|0
a head argument|DT NN NN|BODY_8|0
the original head argument|DT JJ NN NN|BODY_5|0
left hand variables|VBN NN NNS|BODY_7|0
figure 3|NN CD|BODY_9|0
translation|NN|BODY_4|0
an algorithm|DT NN|BODY_1|0
the same operational semantics|DT JJ JJ NNS|BODY_6|0
every clause guard|DT NN NN|BODY_6|0
only stands|RB VBZ|BODY_2|0
the possibility|DT NN|BODY_4|0
reduce/3|NNS|BODY_2|0
true ||JJ NNS|BODY_4|0
simple matches|JJ NNS|BODY_6|0
the lingua franca clause process( j|DT NN NN NN NN NN|BODY_10|0
an intermediate language|DT JJ NN|BODY_2|0
the compilation|DT NN|BODY_3|0
a rich|DT JJ|BODY_3|0
b 1 and . and b|NN CD CC . CC NN|BODY_7|0
the reduction|DT NN|BODY_6:BODY_7|0
call behaviour|NN NN|BODY_3|0
ghc execution|JJ NN|BODY_1:BODY_9|0
a fresh variable a1|DT JJ JJ NNS|BODY_2|0
the variables|DT NNS|BODY_4|0
a sequential search operator|DT JJ NN NN|BODY_3|0
or-parallelism|NN|BODY_6|0
the grain|DT NN|BODY_5|0
a constraint|DT NN|BODY_6|0
several|JJ|BODY_11|0
mode choice(|NN NN|BODY_10|0
the following form h|DT VBG NN NN|BODY_4|0
's run-time suspension test|POS NN NN NN|BODY_4|0
the sole means|DT JJ NNS|BODY_4|0
a primitive goal argument|DT JJ NN NN|BODY_10|0
's head match|POS NN NN|BODY_4|0
the heads and guards|DT NNS CC NNS|BODY_4|0
those|DT|BODY_8|0
an extra unification goal|DT JJ NN NN|BODY_3|0
synchronisation preserves|NN NNS|BODY_4|0
its capacity|PRP$ NN|BODY_5|0
extra control features|JJ NN NNS|BODY_3|0
primitive guard goal|JJ NN NN|BODY_4|0
m)|NN|BODY_13|0
head match|NN NN|BODY_2|0
relevant variable bindings|JJ JJ NNS|BODY_9|0
clause bodies|NN NNS|BODY_8|0
all previous reduce/3 clauses|DT JJ NNS NNS|BODY_3|0
a mandatory run-time safety test|DT JJ NN NN NN|BODY_5|0
sequential conjunction operators|JJ NN NNS|BODY_5|0
the parallel search operator|DT JJ NN NN|BODY_3|0
the fact|DT NN|BODY_3|0
unification directionality|NN NN|BODY_8|0
sequential search restrictions|JJ NN NNS|BODY_2|0
variations|NNS|BODY_2|0
the variable|DT JJ|BODY_11|0
a guard|DT NN|BODY_4|0
no mode declarations|DT NN NNS|BODY_6|0
the requirement|DT NN|BODY_5|0
suspension effects|NN NNS|BODY_5|0
the condition|DT NN|BODY_4|0
the goals|DT NNS|BODY_3|0
's body|POS NN|BODY_5|0
head and guard )|NN CC NN -RRB-|BODY_8|0
wait(test( b|VBG NN|BODY_19|0
wait/3 suspends|NN VBZ|BODY_12|0
a clause or not|DT NN CC RB|BODY_6|0
21]|CD|BODY_3|0
all other well-known clp languages|DT JJ JJ NN NNS|BODY_1|0
each r i|DT NN NN|BODY_1|0
every explicit unification|DT JJ NN|BODY_3|0
extra fairness assumptions|JJ NN NNS|BODY_3|0
no given|DT VBN|BODY_3|0
reduce/3.|VBG|BODY_3|0
relations or . or c n|NNS CC . CC NN NN|BODY_3|0
scheme|NN|BODY_1|0
some form|DT NN|BODY_3|0
such premature computation|JJ JJ NN|BODY_1|0
the ghc suspension test|DT JJ NN NN|BODY_3|0
the message query|DT NN NN|BODY_1|0
the next two|DT JJ CD|BODY_1|0
the same name and arity|DT JJ NN CC NN|BODY_3|0
these clauses|DT NNS|BODY_1|0
these clauses c|DT NNS NN|BODY_1|0
ueda|NNP|BODY_1|0
all transformed calls|DT VBN NNS|BODY_4|0
language semantics|NN NNS|BODY_2|0
life )|NN -RRB-|BODY_12|0
a precise means|DT JJ NN|BODY_9|0
the leading clause|DT JJ NN|BODY_3|0
correctness properties|NN NNS|BODY_5|0
this fact|DT NN|BODY_3|0
the user|DT NN|BODY_7|0
a reserved name|DT VBN NN|BODY_3|0
a wide range|DT JJ NN|BODY_6|0
indefinitely discovery|RB NN|BODY_3|0
the space|DT NN|BODY_2|0
its own simple programming style|PRP$ JJ JJ NN NN|BODY_8|0
strict sequencing|JJ NN|BODY_3|0
language primitives|NN NNS|BODY_2|0
the flow|DT NN|BODY_7|0
a fresh copy|DT JJ NN|BODY_9|0
relevant goal arguments|JJ NN NNS|BODY_6|0
two prominent clp languages|CD JJ NN NNS|BODY_3|0
a modular fashion|DT JJ NN|BODY_8|0
a body variable|DT NN JJ|BODY_10|0
a fresh variable x|DT JJ JJ SYM|BODY_8|0
the rest|DT NN|BODY_10|0
guard goal satisfaction|NN NN NN|BODY_5|0
language flavours|NN NNS|BODY_8|0
the unification primitive =/2|DT NN JJ NN|BODY_3|0
any part|DT NN|BODY_5|0
certain kinds|JJ NNS|BODY_6|0
's eschewal|POS NN|BODY_2|0
's and-sequential operator|POS JJ NN|BODY_3|0
the successful reduction|DT JJ NN|BODY_2|0
choice/2|NN|BODY_5|0
binding goal variables|JJ NN NNS|BODY_11|0
's simple expedient|POS JJ NN|BODY_4|0
sequencing|NN|BODY_8|0
concurrent logic programming|JJ NN NN|TITLE_2:ABSTRACT_1|0
all input arguments|DT NN NNS|BODY_2|0
its satisfaction|PRP$ NN|BODY_5|0
the event|DT NN|BODY_6|0
body goals|NN NNS|BODY_3|0
the commitment operator|DT NN NN|BODY_16|0
parlog relations|NN NNS|BODY_4|0
its correspondences|PRP$ NNS|BODY_4|0
the entire original guard|DT NN JJ NN|BODY_3|0
head arguments and user|NN NNS CC NN|BODY_5|0
's semantic drawbacks|POS JJ NNS|BODY_2|0
the initial translation|DT JJ NN|BODY_2|0
its first two arguments|PRP$ JJ CD NNS|BODY_4|0
the next clause|DT JJ NN|BODY_2|0
nesting|NN|BODY_4|0
the parallel |DT JJ|BODY_6|0
an implementation|DT NN|BODY_4|0
a parlog|DT NN|BODY_5|0
a good systems programming capability|DT JJ NNS NN NN|BODY_7|0
some simple term|DT JJ NN|BODY_4|0
a precise test|DT JJ NN|BODY_3|0
no general overhead|DT JJ NN|BODY_2|0
an extra one way unification|DT JJ CD NN NN|BODY_6|0
a simple concurrent logic|DT JJ JJ NN|ABSTRACT_4|0
call properties|NN NNS|BODY_2|0
an auxiliary relation wait/3|DT JJ NN NN|BODY_5|0
[6 ] p.89-92|CD NN NN|BODY_14|0
no mandatory requirement|DT JJ NN|BODY_8|0
nonflat guards|JJ NNS|ABSTRACT_4|0
a common language variation|DT JJ NN NN|BODY_2|0
's status|POS NN|BODY_6|0
three new primitives =>/2|CD JJ NNS NNS|BODY_3|0
a program|DT NN|BODY_6|0
a passive part variable|DT JJ NN JJ|BODY_6|0
the top level goals|DT JJ NN NNS|BODY_6|0
the meaning|DT NN|BODY_8|0
the heads|DT NNS|BODY_5|0
sequencing head|VBG NN|BODY_3|0
general localised suspension transferring|JJ JJ NN NN|BODY_1|0
one or more guard goals|CD CC JJR NN NNS|BODY_6|0
translating ghc and parlog|NN NN CC NN|BODY_6|0
one-way|JJ|BODY_7|0
the primitive goal|DT JJ NN|BODY_12|0
argument variables|NN NNS|BODY_15|0
a unique variable|DT JJ JJ|BODY_5|0
the condition test(|DT NN NN|BODY_2|0
several variables|JJ NNS|BODY_3|0
whose heads|WP$ NNS|BODY_5:BODY_8|0
be|VB|BODY_5|0
be concurrent|VB JJ|BODY_3|0
5|CD|BODY_1|0
a ) and two( b )|DT -RRB- CC JJ NN -RRB-|BODY_5|0
control variables|NN NNS|BODY_1|0
its anti-substitution|PRP$ NN|BODY_5|0
the general form|DT JJ NN|BODY_1|0
the required kind|DT JJ NN|BODY_5|0
the reserved predicate|DT VBN NN|BODY_5|0
the translation|DT NN|BODY_1|0
unbound variables|JJ NNS|BODY_1|0
their differences|PRP$ NNS|BODY_5|0
its sequencing rule alpha(|PRP$ NN NN NNS|BODY_2|0
cases|NNS|BODY_5|0
the semantically desirable properties|DT RB JJ NNS|BODY_4|0
commitment subject|NN NN|BODY_5|0
an otherwise predicate|DT RB NN|BODY_6|0
indexing tests|NN NNS|BODY_2|0
ground|VBN|BODY_14|0
the need|DT NN|BODY_2|0
the central idea|DT JJ NN|BODY_1|0
's first clause handles conjunctions|POS JJ NN NNS NNS|BODY_8|0
20]|CD|BODY_8|0
a logic program|DT NN NN|BODY_9|0
a unsafe binding|DT JJ NN|BODY_7|0
done|VBN|BODY_7|0
franca semantics|NN NNS|BODY_1|0
many parlog programs|JJ NN NNS|BODY_9|0
more than variable|JJR IN JJ|BODY_9|0
parallelism|NN|BODY_8|0
preservation|NN|BODY_1|0
the design philosophy|DT NN NN|BODY_1|0
the following|DT VBG|BODY_2|0
the following clauses|DT VBG NNS|BODY_1|0
the next element|DT JJ NN|BODY_5|0
the output argument symbol|DT NN NN NN|BODY_13|0
these measures|DT NNS|BODY_1|0
's operational semantics differs|POS JJ NNS NNS|BODY_2|0
a hybrid|DT NN|BODY_3|0
implementation overheads|NN NNS|BODY_2|0
frozen clauses|VBN NNS|BODY_1|0
furthermore a clause choice|RBR DT NN NN|BODY_1|0
a run-time safety test|DT NN NN NN|BODY_5|0
p.121-132|NN|BODY_6|0
the relevant program|DT JJ NN|BODY_6|0
a clp vehicle|DT NN NN|BODY_2|0
different demands|JJ NNS|BODY_2|0
systems programming|NNS NN|BODY_1:BODY_9|0
the head matching requirements|DT NN NN NNS|BODY_3|0
these features|DT NNS|BODY_6|0
faster algorithms|RBR NNS|BODY_1|0
safety identification problem|NN NN NN|BODY_16|0
the signal|DT NN|BODY_1|0
worth programming|JJ NN|BODY_5|0
multiple binding environments|JJ JJ NNS|BODY_5|0
bind given values|NN VBN NNS|BODY_10|0
the safe guard suspension mechanism|DT NN NN NN NN|BODY_5|0
the satisfiable goal|DT JJ NN|BODY_1|0
deep guard evaluations|JJ NN NNS|BODY_1|0
the original guard|DT JJ NN|BODY_7|0
inter- translatable|DT JJ|BODY_9|0
these semantic difficulties|DT JJ NNS|BODY_1|0
subsequent clause guards|JJ NN NNS|BODY_7|0
the overheads|DT NNS|BODY_1|0
parlog meta-calls|NN NNS|BODY_2|0
programming unification|NN NN|BODY_4|0
the calling argument|DT VBG NN|BODY_1|0
some common denominator|DT JJ NN|BODY_2|0
, and yet|, CC RB|BODY_7|0
the call choice(x|DT NN NN|BODY_1|0
the following things|DT VBG NNS|BODY_5|0
-)|NNP|BODY_4|0
[19]|NN|BODY_5|0
significant expressive power [3]|JJ JJ NN NN|BODY_5|0
a general algorithm|DT JJ NN|BODY_1|0
sequential conjunction and search operators|JJ NN CC NN NNS|BODY_1|0
's complex action|POS JJ NN|BODY_5|0
kl1-b [10]|JJ NN|BODY_1|0
cp[-,# ]|RB SYM|BODY_2|0
the means|DT NNS|BODY_2|0
the special primitive|DT JJ JJ|BODY_1|0
adjacent clauses|JJ NNS|BODY_7|0
's parlog group|POS NN NN|BODY_11|0
] p|NN NN|BODY_6|0
the responsible guard|DT JJ NN|BODY_8|0
's simple input|POS NN NN|BODY_7|0
the moment parlog|DT NN NN|BODY_1|0
b j|NN NN|BODY_13|0
the examination|DT NN|BODY_1|0
] p.121-132|JJ NN|BODY_3|0
operating systems|VBG NNS|BODY_1|0
the committed choice mechanism|DT VBN NN NN|BODY_28|0
most ghc clauses|JJS NN NNS|BODY_1|0
introduction|NN|BODY_1|0
parlog [6]|NN NN|BODY_7|0
ward/3.|NN|BODY_7|0
4|CD|BODY_1|0
the guard suspension test|DT NN NN NN|BODY_3|0
unsafe user-defined guard goals|JJ VBN NN NNS|BODY_1|0
this steers programmers|DT NNS NNS|BODY_1|0
the general method|DT JJ NN|BODY_1|0
true | mode way(-)|JJ RB NN NN|BODY_16|0
no algorithm|DT NN|BODY_1|0
this declaration|DT NN|BODY_5|0
its success [18]|PRP$ NN NN|BODY_12|0
x4 )|NNP -RRB-|BODY_12|0
the same relation name and arity|DT JJ NN NN CC NN|BODY_8|0
the following ghc clause process|DT VBG JJ NN NN|BODY_1|0
arguments|NNS|BODY_16|0
the parallel test/1 call might|DT JJ NNS JJ NN|BODY_1|0
sequence|NN|BODY_4|0
2. ghc|DT NN|BODY_1|0
both ghc|DT NN|BODY_1|0
lingua franca goals|NN NNS NNS|BODY_1|0
the parlog style|DT NN NN|BODY_7|0
the body commence|DT NN NN|BODY_8|0
uncoupling evaluation|JJ NN|BODY_1|0
a more demand driven scheme|DT JJR NN VBN NN|BODY_1|0
all this happens|DT DT VBZ|BODY_1|0
parlog or acts|NN CC NNS|BODY_1|0
the second|DT JJ|BODY_5|0
their respective merits|PRP$ JJ NNS|ABSTRACT_5|0
this change|DT NN|BODY_1|0
the unidirectional unification|DT JJ NN|BODY_1|0
a simpler two argument meta-call satisfy/2|DT JJR CD NN NN NN|BODY_6|0
both sequential operators|DT JJ NNS|BODY_1|0
ghc goals|JJ NNS|BODY_1|0
or-sequential search ghc|JJ NN NN|BODY_1|0
the second top level goal|DT JJ JJ NN NN|BODY_1|0
the unify procedure|DT JJ NN|BODY_4|0
clause examination|NN NN|BODY_9|0
clp language programs|NN NN NNS|BODY_3|0
the first three|DT JJ CD|BODY_4|0
their distinct variable replacements|PRP$ JJ JJ NNS|BODY_10|0
values|NNS|BODY_4|0
many parlog primitives|JJ NN NNS|BODY_5|0
parlog and ghc.|NN CC NN|BODY_5|0
the lack|DT NN|BODY_1|0
these extra semantic deficiencies|DT JJ JJ NNS|BODY_1|0
6|CD|BODY_1|0
multi-processing implementations|JJ NNS|BODY_1|0
this kind|DT NN|BODY_1|0
's clauses|POS NNS|BODY_4|0
] p.140-141|JJ NNS|BODY_5|0
ghc or parlog|JJ CC NN|BODY_8|0
kernel parlog execution|NN NN NN|BODY_1|0
restrictions|NNS|BODY_1|0
the operator swap|DT NN NN|BODY_1|0
the response|DT NN|BODY_4|0
these variables|DT NNS|BODY_4|0
the implementation|DT NN|BODY_11|0
all head matches|DT NN NNS|BODY_1|0
a relation|DT NN|BODY_1|0
one stage [21]|CD NN JJ|BODY_9|0
the general rule|DT JJ NN|BODY_1|0
the price|DT NN|BODY_1|0
a and a1|DT CC NNS|BODY_1|0
right|NN|BODY_11|0
effective implementation|JJ NN|BODY_24|0
this point|DT NN|BODY_1|0
this approach|DT NN|BODY_1|0
a valid goal|DT JJ NN|BODY_12|0
an and-sequential operator|DT JJ NN|BODY_3|0
head matching and guard evaluation|NN NN CC NN NN|BODY_9|0
kernel parlog [6|NN NN NNS|BODY_7|0
the suspended unification|DT VBN NN|BODY_8|0
variable sharing|JJ NN|BODY_7|0
the algorithm|DT NN|BODY_1|0
lists|NNS|BODY_1|0
the two argument meta-call call/2|DT CD NN NN NN|BODY_3|0
2|CD|BODY_1|0
its unidirectionally ensures|PRP$ RB VBZ|BODY_1|0
the original goals|DT JJ NNS|BODY_6|0
[4]|NN|BODY_7|0
each safety suspension condition|DT NN NN NN|BODY_1|0
that evaluation|DT NN|BODY_9|0
the method|DT NN|ABSTRACT_1|0
each relation r i|DT NN NN NN|BODY_1|0
the original correct translation|DT JJ JJ NN|BODY_7|0
the satisfaction|DT NN|BODY_1|0
complementary virtues|JJ NNS|BODY_3|0
an inadequately selective guard safety criterion|DT RB JJ NN NN NN|BODY_1|0
this technique|DT NN|BODY_1|0
access|NN|BODY_1|0
a different example|DT JJ NN|BODY_1|0
these restrictions|DT NNS|BODY_1|0
the primitive ward/3|DT JJ NN|BODY_5|0
both types|DT NNS|BODY_1|0
the point|DT NN|BODY_1|0
its main feature|PRP$ JJ NN|BODY_1|0
resolution|NN|BODY_1|0
] p.82|NN NN|BODY_9|0
r 1|NN CD|BODY_5|0
the simplicity|DT NN|BODY_1|0
its declarative meaning|PRP$ JJ NN|BODY_6|0
only two extra primitive goals|RB CD JJ JJ NNS|BODY_1|0
instantiable side variables|JJ NN NNS|BODY_1|0
one primitive process|CD JJ NN|BODY_9|0
7]|CD|BODY_4|0
j|NN|BODY_13|0
cp[-,# ] [14]|RB JJ NN|BODY_11|0
that guards|DT NNS|BODY_3|0
the original clause|DT JJ NN|BODY_1|0
the meta-call|DT NN|BODY_1|0
a general purpose programming tool|DT JJ NN NN NN|BODY_6|0
flavoured meta-interpreters|VBN NNS|BODY_7|0
some parlog clauses|DT NN NNS|BODY_1|0
this property|DT NN|BODY_3|0
the right hand side goal or conjunction|DT JJ NN NN NN CC NN|BODY_8|0
way( x )|NN SYM -RRB-|BODY_5|0
the clauses|DT NNS|BODY_1|0
nothing|NN|BODY_3|0
the sequencing rule|DT NN NN|BODY_1|0
7. example translations|JJR NN NNS|BODY_1|0
the whole head match|DT JJ NN NN|BODY_1|0
a different one-way unification primitive =>/2|DT JJ JJ NN JJ NN|BODY_4|0
the guarded clause compare([ a|b]|DT JJ NN NN NN|BODY_1|0
this behaviour|DT NN|BODY_1|0
a common medium|DT JJ NN|BODY_5|0
part|NN|BODY_1|0
p )|NN -RRB-|BODY_24|0
every member|DT NN|BODY_1|0
edinburgh prolog syntax|NN NN NN|BODY_1|0
output mode parlog head arguments|NN NN NN NN NNS|BODY_1|0
the whole ghc guard|DT JJ NN NN|BODY_1|0
implementations|NNS|BODY_1|0
's wide meta-programming capability|POS JJ NN NN|BODY_7|0
experience|NN|BODY_1|0
a better idea|DT JJR NN|BODY_1|0
parlog execution|NN NN|BODY_1|0
input resolution|NN NN|BODY_9|0
] p.89-92|JJ NN|BODY_8|0
parallel conjunction operators|JJ NN NNS|BODY_1|0
the synchronised satisfaction|DT JJ NN|BODY_1|0
the absence|DT NN|BODY_1|0
its guard|PRP$ NN|BODY_13|0
requirements|NNS|BODY_10|0
we|PRP|BODY_4|0
more eager and computation space|RBR JJ CC JJ NN|BODY_5|0
a variant|DT NN|BODY_1|0
mode declarations ghc input matches|NN NNS NN NN NNS|BODY_1|0
separate goals|JJ NNS|BODY_1|0
a unbound the goal valid(|DT JJ DT NN NN|BODY_1|0
all the head arguments|PDT DT NN NNS|BODY_1|0
sequentially conjoined goals|RB VBN NNS|BODY_1|0
the same|DT JJ|BODY_1|0
anti-substitutability [21] 4.7.2|NN NN CD|BODY_12|0
each unification|DT NN|BODY_1|0
the generation|DT NN|BODY_1|0
an impoverished systems programming capability|DT JJ NNS NN NN|BODY_2|0
a strategy|DT NN|BODY_1|0
whose guards|WP$ NNS|BODY_5|0
ghc clause head arguments|JJ NN NN NNS|BODY_1|0
e) test( b|DT NN NN|BODY_1|0
the metacall satisfy/2|DT NN NN|BODY_3|0
its substitute|PRP$ NN|BODY_5|0
control meta-calls|NN NNS|BODY_2|0
call primitives|NN NNS|BODY_7|0
each conjunct|DT NN|BODY_6|0
both schemes|DT NNS|BODY_1|0
a parallel clause search operator|DT JJ NN NN NN|BODY_5|0
the sequential clause search operator|DT JJ NN NN NN|BODY_8|0
these operators|DT NNS|BODY_1|0
its lingua franca translation|PRP$ NN NN NN|BODY_12|0
the original parlog conjunction|DT JJ NN NN|BODY_2|0
the mixed conjunction|DT JJ NN|BODY_1|0
these|DT|BODY_6|0
3|CD|BODY_1|0
these languages|DT NNS|ABSTRACT_7|0
a lingua franca conjunction|DT NN NN NN|BODY_11|0
a safety suspension condition|DT NN NN NN|BODY_6|0
all been satisfied|DT VBN VBN|BODY_7|0
its own common denominator style|PRP$ JJ JJ NN NN|BODY_5|0
the safe guard meta-interpreter|DT JJ NN NN|BODY_8|0
passive part concurrency|JJ NN NN|BODY_1|0
similar syntax and semantics|JJ NN CC NNS|BODY_4|0
the strategy|DT NN|BODY_1|0
its first three arguments|PRP$ JJ CD NNS|BODY_7|0
no guard goal|DT NN NN|BODY_1|0
other cases|JJ NNS|BODY_1|0
otherwise suspension|RB NN|BODY_1|0
the manner|DT NN|BODY_4|0
) | process(|-RRB- NN NN|BODY_6:BODY_16|0
goal(|NN|BODY_8|0
not(test( in) ) | transform(|JJ NN -RRB- NN NN|BODY_19|0
true | transform(|JJ NN NN|BODY_10|0
other properties|JJ NNS|BODY_1|0
's first two arguments|POS JJ CD NNS|BODY_8|0
this signals|DT NNS|BODY_1|0
the next unencountered clause search operator|DT JJ JJ NN NN NN|BODY_6|0
the other hand parlog|DT JJ NN NN|BODY_1|0
body goal evaluation|NN NN NN|BODY_37|0
early detection|JJ NN|BODY_1|0
a ward/3 predicate goal|DT NN NN NN|BODY_1|0
an original head argument variable|DT JJ NN NN JJ|BODY_7|0
head matches|NN NNS|BODY_1|0
_121|CD|BODY_7|0
a1|NN|BODY_8|0
either executing ghc or parlog|DT VBG NN CC NN|BODY_7|0
a common language variant|DT JJ NN NN|BODY_5|0
tasks|NNS|BODY_4|0
the parlog source|DT NN NN|BODY_3|0
the status quo|DT NN NN|BODY_2|0
its first|PRP$ JJ|BODY_6|0
a single binding environment|DT JJ JJ NN|BODY_4|0
6.1|CD|BODY_17|0
that variable|DT JJ|BODY_9|0
this special primitive will|DT JJ JJ NN|BODY_9|0
a full meta-interpreter|DT JJ NN|BODY_1|0
all standard ghc and parlog primitives|DT JJ NN CC NN NNS|BODY_1|0
both clp languages|DT NN NNS|BODY_1|0
no sequential conjunction operator|DT JJ NN NN|BODY_3|0
reverse translation|VB NN|BODY_1|0
the programming style|DT NN NN|BODY_1|0
the same way|DT JJ NN|BODY_1|0
's nice semantic properties|POS JJ JJ NNS|BODY_4|0
flat ghc.|JJ NN|BODY_7|0
sequential operators|JJ NNS|BODY_1|0
the operational semantics|DT JJ NNS|BODY_1|0
this emphasis|DT NN|BODY_1|0
's operational and declarative semantics|POS JJ CC JJ NNS|BODY_4|0
] p.65-66|JJ NNS|BODY_11|0
systems|NNS|BODY_5|0
the control emphasis|DT NN NN|BODY_1|0
the same rule|DT JJ NN|BODY_1|0
the same rule [6|DT JJ NN NNS|BODY_2|0
the sequentiality|DT NN|BODY_1|0
three steps|CD NNS|BODY_4|0
's relation|POS NN|BODY_5|0
parallel clause searches|JJ NN NNS|BODY_1|0
relevant goal variables|JJ NN NNS|BODY_5|0
that attempted binding|DT JJ NN|BODY_6|0
and-parallel conjunctions|JJ NNS|BODY_2|0
complex terms|JJ NNS|BODY_5:BODY_1|0
full head matching functionality|JJ NN VBG NN|BODY_2|0
its first argument goal|PRP$ JJ NN NN|BODY_16|0
its last two arguments|PRP$ JJ CD NNS|BODY_3|0
success or failure|NN CC NN|BODY_5|0
the attempted satisfaction|DT JJ NN|BODY_1|0
the ghc run-time suspension test|DT NN NN NN NN|BODY_6|0
the language semantics|DT NN NNS|BODY_6|0
the other variables|DT JJ NNS|BODY_4|0
the remaining cases|DT VBG NNS|BODY_1|0
the sequential search operator|DT JJ NN NN|BODY_1|0
the two sides|DT CD NNS|BODY_2|0
this goal|DT NN|BODY_2|0
this signal|DT NN|BODY_6|0
warding|NN|BODY_7|0
a simple sound way|DT JJ JJ NN|BODY_1|0
each lingua franca clause|DT NN NN NN|BODY_9|0
a new primitive ground/1|DT JJ JJ NNS|BODY_1|0
fills empty guards or bodies|NNS JJ NNS CC NNS|BODY_3|0
other clauses|JJ NNS|BODY_1|0
the primitive true|DT JJ JJ|BODY_1|0
the same satisfaction conditions|DT JJ NN NNS|BODY_6|0
their effects|PRP$ NNS|BODY_10|0
this primitive|DT JJ|BODY_1|0
furthermore kernel parlog|JJR NN NN|BODY_1|0
its second clause|PRP$ JJ NN|BODY_1|0
the suspending primitive primitive/1|DT VBG JJ NNS|BODY_3|0
98-99 , 141-142|CD , CD|BODY_1|0
the whole algorithm|DT JJ NN|BODY_1|0
